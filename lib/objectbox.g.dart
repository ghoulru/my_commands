// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'screens/passwords/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2675329927980441605),
      name: 'CategoryTabModel',
      lastPropertyId: const IdUid(3, 7034692668164663745),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1816030199728981195),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 816146809335039323),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7034692668164663745),
            name: 'sort',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'items', srcEntity: 'PasswordsItem', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 543114357366806874),
      name: 'PasswordsItem',
      lastPropertyId: const IdUid(3, 510973918699378807),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7902067711050016355),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1649532452265075981),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 510973918699378807),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 8654647992541905420),
            relationTarget: 'CategoryTabModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'entities', srcEntity: 'PasswordsItemEntity', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 5617649913534481621),
      name: 'PasswordsItemEntity',
      lastPropertyId: const IdUid(4, 270572916990233661),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3435656437487757177),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 208306671054135815),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8007586191733937292),
            name: 'sort',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 270572916990233661),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 5752429500254167048),
            relationTarget: 'PasswordsItem')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 5617649913534481621),
      lastIndexId: const IdUid(2, 5752429500254167048),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    CategoryTabModel: EntityDefinition<CategoryTabModel>(
        model: _entities[0],
        toOneRelations: (CategoryTabModel object) => [],
        toManyRelations: (CategoryTabModel object) => {
              RelInfo<PasswordsItem>.toOneBacklink(3, object.id,
                  (PasswordsItem srcObject) => srcObject.category): object.items
            },
        getId: (CategoryTabModel object) => object.id,
        setId: (CategoryTabModel object, int id) {
          object.id = id;
        },
        objectToFB: (CategoryTabModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.sort);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = CategoryTabModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..sort = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          InternalToManyAccess.setRelInfo(
              object.items,
              store,
              RelInfo<PasswordsItem>.toOneBacklink(3, object.id,
                  (PasswordsItem srcObject) => srcObject.category),
              store.box<CategoryTabModel>());
          return object;
        }),
    PasswordsItem: EntityDefinition<PasswordsItem>(
        model: _entities[1],
        toOneRelations: (PasswordsItem object) => [object.category],
        toManyRelations: (PasswordsItem object) => {
              RelInfo<PasswordsItemEntity>.toOneBacklink(4, object.id,
                      (PasswordsItemEntity srcObject) => srcObject.parent):
                  object.entities
            },
        getId: (PasswordsItem object) => object.id,
        setId: (PasswordsItem object, int id) {
          object.id = id;
        },
        objectToFB: (PasswordsItem object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PasswordsItem()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.category.attach(store);
          InternalToManyAccess.setRelInfo(
              object.entities,
              store,
              RelInfo<PasswordsItemEntity>.toOneBacklink(4, object.id,
                  (PasswordsItemEntity srcObject) => srcObject.parent),
              store.box<PasswordsItem>());
          return object;
        }),
    PasswordsItemEntity: EntityDefinition<PasswordsItemEntity>(
        model: _entities[2],
        toOneRelations: (PasswordsItemEntity object) => [object.parent],
        toManyRelations: (PasswordsItemEntity object) => {},
        getId: (PasswordsItemEntity object) => object.id,
        setId: (PasswordsItemEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PasswordsItemEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.sort);
          fbb.addInt64(3, object.parent.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PasswordsItemEntity()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..sort = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.parent.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [CategoryTabModel] entity fields to define ObjectBox queries.
class CategoryTabModel_ {
  /// see [CategoryTabModel.id]
  static final id =
      QueryIntegerProperty<CategoryTabModel>(_entities[0].properties[0]);

  /// see [CategoryTabModel.name]
  static final name =
      QueryStringProperty<CategoryTabModel>(_entities[0].properties[1]);

  /// see [CategoryTabModel.sort]
  static final sort =
      QueryIntegerProperty<CategoryTabModel>(_entities[0].properties[2]);
}

/// [PasswordsItem] entity fields to define ObjectBox queries.
class PasswordsItem_ {
  /// see [PasswordsItem.id]
  static final id =
      QueryIntegerProperty<PasswordsItem>(_entities[1].properties[0]);

  /// see [PasswordsItem.name]
  static final name =
      QueryStringProperty<PasswordsItem>(_entities[1].properties[1]);

  /// see [PasswordsItem.category]
  static final category = QueryRelationToOne<PasswordsItem, CategoryTabModel>(
      _entities[1].properties[2]);
}

/// [PasswordsItemEntity] entity fields to define ObjectBox queries.
class PasswordsItemEntity_ {
  /// see [PasswordsItemEntity.id]
  static final id =
      QueryIntegerProperty<PasswordsItemEntity>(_entities[2].properties[0]);

  /// see [PasswordsItemEntity.name]
  static final name =
      QueryStringProperty<PasswordsItemEntity>(_entities[2].properties[1]);

  /// see [PasswordsItemEntity.sort]
  static final sort =
      QueryIntegerProperty<PasswordsItemEntity>(_entities[2].properties[2]);

  /// see [PasswordsItemEntity.parent]
  static final parent = QueryRelationToOne<PasswordsItemEntity, PasswordsItem>(
      _entities[2].properties[3]);
}
